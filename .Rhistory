usethis::use_package("waiter")
usethis::use_package("shinycssloaders")
usethis::use_package("fontawesome")
usethis::use_package("dplyr")
usethis::use_package("stringr")
usethis::use_package("rlang")
usethis::use_package("purrr")
usethis::use_package("lubridate")
usethis::use_package("reactable")
?golem::favicon()
golem::with_golem_options
?golem::with_golem_options
## Add internal datasets ----
## If you have data in your package
usethis::use_data_raw(name = "sales", open = FALSE)
## Run checks ----
## Check the package before sending to prod
devtools::check()
usethis::use_package("bs4Dash")
usethis::use_package("vroom")
source("~/R/shiny apps/test app/test_apps/rs_test.R", echo=TRUE)
-12.58
#' input toggle button.
#'
#' @param inputId button input id.
#' @param value button active state.
#'
#' @return toggle button.
#' @export
#'
#' @examples
toggle_btn <- function(inputId, value = FALSE) {
icon_up   <- fontawesome::fa_i("fas fa-circle-chevron-up")
icon_down <- fontawesome::fa_i("fas fa-circle-chevron-down")
icon_up$attribs$class   <- paste("icon", icon_up$attribs$class)
icon_down$attribs$class <- paste("icon", icon_down$attribs$class)
inputTag <- tags$input(id = inputId, type = "checkbox")
if (!is.null(value) && value) {
inputTag$attribs$checked <- "checked"
}
toggleTag <- tags$div(
class = "form-group shiny-input-container",
style = "padding-left: 92%;",
tags$div(
class = "pretty p-toggle",
inputTag,
class = "p-plain p-bigger p-icon",
tags$div(
class = "state p-on p-default",
icon_up
),
tags$div(
class = "state p-off p-default",
icon_down
)
shinyWidgets:::attachShinyWidgetsDep(toggleTag, "pretty")
}
library(shiny); runApp('~/R/shiny apps/test app/test_apps/rs_test.R')
runApp('~/R/shiny apps/test app/test_apps/rs_test.R')
runApp()
runApp('~/R/shiny apps/test app/test_apps/rs_test.R')
runApp()
?shinyWidgets::prettyToggle
?dropMenu
?echarts4r::e_chart()
?shinycssloaders::withSpinner
?echarts4rOutput
renv::init()
warnings()
?hc_xAxis
